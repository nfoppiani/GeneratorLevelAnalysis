#include "services_microboone.fcl"

BEGIN_PROLOG

loc_generatorLevelAnalyzer:
{
    module_type:                "generatorLevelAnalyzer"
    isData: false
    beamStart:  4.702
    beamEnd:    14.502
}

END_PROLOG


process_name: generatorLevelAnalyzer      #The process name must NOT contain any underscores

source:
{
  module_type: RootInput
  maxEvents:   -1
}

services: {

  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  TFileService: { fileName: "generatorLevelAnalyzer.root" }
  @table::microboone_services_reco
  #@table::microboone_simulation_services
  #TPCEnergyCalibService:         @local::microboone_tpcenergycalib_service
  #Timing:       {}
  #SimpleMemoryCheck:     { ignoreTotal: 1 }     #default is one
  RandomNumberGenerator: {}                     #ART native random number generator
  message:      @local::standard_info
}

services.ChannelStatusService.ChannelStatusProvider.UseDB: false

physics: {

  producers: {
     # ParameterSets for zero or more producer modules
  }
  analyzers: {
     # ParameterSets for zero or more analyzer modules
     genLevelAnalyzer: @local::loc_generatorLevelAnalyzer
  }

  filters: {
     # ParameterSets for zero or more filter modules
  }

  # analyzeIt:[
  #
  #           ]
  path0: [ genLevelAnalyzer ]
  stream: [ out0 ]
  #path1 : [  comma separated list of module labels of producer or filter modules  ]
  #path2 : [  comma separated list of module labels of analyzer or output modules  ]
  #path3 : [  comma separated list of module labels of analyzer or output modules  ]

  trigger_paths: [ ]
  end_paths:    [ path0 ]

}

outputs.out0: { module_type: RootOutput
                fileName:    "output.root"
                dataTier:    "charge"
                streamName:  "all"
                SelectEvents: [ path0 ]
                compressionLevel: 1
              }
